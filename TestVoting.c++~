                                                                     
                                                                     
                                                                     
                                             
// --------------------------------
// projects/collatz/TestCollatz.c++
// Copyright (C) 2013
// Glenn P. Downing
// --------------------------------

/*
To test the program:
    % ls /usr/include/cppunit/
    ...
    TestFixture.h
    ...
    % locate libcppunit.a
    /usr/lib/libcppunit.a
    % g++ -lcppunit -ldl -pedantic -std=c++0x -Wall Collatz.c++ TestCollatz.c++ -o TestCollatz.c++.app
    % valgrind TestCollatz.c++.app >& TestCollatz.c++.out
*/

// --------
// includes
// --------

#include <iostream> // cout, endl
#include <sstream>  // istringtstream, ostringstream
#include <string>   // ==

#include "cppunit/extensions/HelperMacros.h" // CPPUNIT_TEST, CPPUNIT_TEST_SUITE, CPPUNIT_TEST_SUITE_END
#include "cppunit/TestFixture.h"             // TestFixture
#include "cppunit/TextTestRunner.h"          // TextTestRunner

#include "Voting.h"
 
    // ----
    // read
    // ----

    void test_read () {
        istringstream r("1\n\n3\nJohn Doe\nJane Smith\nSirhan 			Sirhan\n2 1 3\n2 3 1\n1 2 3\n3 2 1");
        vector<election> elections;
	int numElections;
        const bool b = voting_read(r, elections,numElections);
        CPPUNIT_ASSERT(b == true);
        CPPUNIT_ASSERT(numElections == 1);
        CPPUNIT_ASSERT(elections[0].numCandidates == 3);
        CPPUNIT_ASSERT(elections[0].candidates[0] == "John Doe");
	CPPUNIT_ASSERT(elections[0].candidates[1] == "Jane Smith");
	CPPUNIT_ASSERT(elections[0].candidates[2] == "Sirhan Sirhan");
	CPPUNIT_ASSERT(elections[0].ballots[0][0] == 2);
	CPPUNIT_ASSERT(elections[0].ballots[0][1] == 1);
	CPPUNIT_ASSERT(elections[0].ballots[0][2] == 3);
	CPPUNIT_ASSERT(elections[0].ballots[1][0] == 2);
	CPPUNIT_ASSERT(elections[0].ballots[1][1] == 3);
	CPPUNIT_ASSERT(elections[0].ballots[1][2] == 1);
	CPPUNIT_ASSERT(elections[0].ballots[2][0] == 1);
	CPPUNIT_ASSERT(elections[0].ballots[2][1] == 2);
	CPPUNIT_ASSERT(elections[0].ballots[2][2] == 3);
	CPPUNIT_ASSERT(elections[0].ballots[3][0] == 3);
	CPPUNIT_ASSERT(elections[0].ballots[3][1] == 2);
	CPPUNIT_ASSERT(elections[0].ballots[3][2] == 1);
	}

void test_read_1 () {
        std::istringstream r("2\nA\nB\n1 2\n1 2\n 2 1");
        std::vector<std::string> names;
        std::vector<std::vector<int> > ballots;

        const bool b = voting_read(r, names, ballots);
        CPPUNIT_ASSERT(b == true);
        CPPUNIT_ASSERT(names.size() == 2);
        CPPUNIT_ASSERT(ballots.size() == 3);
        CPPUNIT_ASSERT(names[0] == "A");
        CPPUNIT_ASSERT(names[1] == "B");
    }
void test_read_2 () {
        std::istringstream r("2\nBen\ntom\n1 2\n2 1\n");
        Election e;
        voting_read(r, e);
        CPPUNIT_ASSERT(e.numCandidates == 2);
        CPPUNIT_ASSERT(e.totalBallots  == 2);
        CPPUNIT_ASSERT(e.candidates[0].name == "Bob");
        CPPUNIT_ASSERT(e.candidates[1].name == "Joe");
        CPPUNIT_ASSERT(e.allBallots[0].preference[0] == 1);
        CPPUNIT_ASSERT(e.allBallots[0].preference[1] == 2);
        CPPUNIT_ASSERT(e.allBallots[1].preference[0] == 2);
        CPPUNIT_ASSERT(e.allBallots[1].preference[1] == 1);
    }
void test_read_3() {
        std::istringstream r("5\nA\nB\nC\nD\nE\n1 2 3 4 5\n1 2 3 4 5\n 5 4 3 2 1");
        std::vector<std::string> names;
        std::vector<std::vector<int> > ballots;

        const bool b = voting_read(r, names, ballots);
        CPPUNIT_ASSERT(b == true);
        CPPUNIT_ASSERT(names.size() == 5);
        CPPUNIT_ASSERT(ballots.size() == 3);
        CPPUNIT_ASSERT(names[0] == "A");
        CPPUNIT_ASSERT(names[1] == "B");
        CPPUNIT_ASSERT(names[2] == "C");
        CPPUNIT_ASSERT(names[3] == "D");
        CPPUNIT_ASSERT(names[4] == "E");

    }
void test_read_4 () {
        std::istringstream r("2\nBob\nJoe\n1 2\n2 1\n1 2\n");
        Election e;
        voting_read(r, e);
        CPPUNIT_ASSERT(e.numCandidates == 2);
        CPPUNIT_ASSERT(e.totalBallots  == 3);
        CPPUNIT_ASSERT(e.candidates[0].name == "Bob");
        CPPUNIT_ASSERT(e.candidates[1].name == "Joe");
        CPPUNIT_ASSERT(e.allBallots[0].preference[0] == 1);
        CPPUNIT_ASSERT(e.allBallots[0].preference[1] == 2);
        CPPUNIT_ASSERT(e.allBallots[1].preference[0] == 2);
        CPPUNIT_ASSERT(e.allBallots[1].preference[1] == 1);
        CPPUNIT_ASSERT(e.allBallots[2].preference[0] == 1);
        CPPUNIT_ASSERT(e.allBallots[2].preference[1] == 2);
    }
void test_read_5 () {
        istringstream r("1\n\n3\nDover\nSmith\peko 			\n2 1 3\n2 3 1\n1 2 3\n3 2 1");
        vector<election> elections;
	int numElections;
        const bool b = voting_read(r, elections,numElections);
        CPPUNIT_ASSERT(b == true);
        CPPUNIT_ASSERT(numElections == 1);
        CPPUNIT_ASSERT(elections[0].numCandidates == 3);
        CPPUNIT_ASSERT(elections[0].candidates[0] == "Dover
	CPPUNIT_ASSERT(elections[0].candidates[1] == "Smith");
	CPPUNIT_ASSERT(elections[0].candidates[2] == "peko
	CPPUNIT_ASSERT(elections[0].ballots[0][0] == 2);
	CPPUNIT_ASSERT(elections[0].ballots[0][1] == 1);
	CPPUNIT_ASSERT(elections[0].ballots[0][2] == 3);
	CPPUNIT_ASSERT(elections[0].ballots[1][0] == 2);
	CPPUNIT_ASSERT(elections[0].ballots[1][1] == 3);
	CPPUNIT_ASSERT(elections[0].ballots[1][2] == 1);
	CPPUNIT_ASSERT(elections[0].ballots[2][0] == 1);
	CPPUNIT_ASSERT(elections[0].ballots[2][1] == 2);
	CPPUNIT_ASSERT(elections[0].ballots[2][2] == 3);
	CPPUNIT_ASSERT(elections[0].ballots[3][0] == 3);
	CPPUNIT_ASSERT(elections[0].ballots[3][1] == 2);
	CPPUNIT_ASSERT(elections[0].ballots[3][2] == 1);
	}
    // -----
    // print
    // -----

    void test_print1 () {
        std::ostringstream w;
	vector<string> v = {"Akshay Vyas"};
        voting_print(w, v);
        CPPUNIT_ASSERT(w.str() == "Akshay Vyas\n");}


    void test_print2 () {
        std::ostringstream w;
	vector<string> v = {"Greg Wadley", "Akshay Vyas"};
        voting_print(w, v);
        CPPUNIT_ASSERT(w.str() == "greg Wadley\nAkshay Vyas\n");}


    void test_print3 () {
        std::ostringstream w;
	vector<string> v = {"Glenn Downing", "Glenn Downing"};
        voting_print(w, v);
        CPPUNIT_ASSERT(w.str() == "Glenn Downing\nGlenn Downing\n");}
 void test_print4 () {
        std::ostringstream w;
	vector<string> v = {"Pikachu"};
        voting_print(w, v);
        CPPUNIT_ASSERT(w.str() == "Pikachu\n");}

 void test_print5 () {
        std::ostringstream w;
	vector<string> v = {"Cho-Gath"};
        voting_print(w, v);
        CPPUNIT_ASSERT(w.str() == "Cho-Gath\n");}

 void test_print6 () {
        std::ostringstream w;
	vector<string> v = {"Taric", "Lee Sin", "Riven"};
        voting_print(w, v);
        CPPUNIT_ASSERT(w.str() == "Taric","lee Sin". "Riven");}




